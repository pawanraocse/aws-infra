#!/bin/bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Load environment variables
if [ -f ../.env ]; then
    log_info "Loading environment variables from ../.env"
    set -a
    source ../.env
    set +a
else
    log_warn "No .env file found, using defaults"
fi

# Set AWS profile
export AWS_PROFILE=${AWS_PROFILE:-default}
log_info "Using AWS Profile: $AWS_PROFILE"

# Verify AWS credentials
if ! aws sts get-caller-identity --profile "$AWS_PROFILE" > /dev/null 2>&1; then
    log_error "AWS credentials not configured or invalid for profile: $AWS_PROFILE"
    exit 1
fi

log_info "AWS credentials verified"

# Get AWS region from terraform.tfvars or use default
AWS_REGION=$(grep 'aws_region' terraform.tfvars 2>/dev/null | cut -d'"' -f2 || echo "us-east-1")
export AWS_REGION
log_info "Target AWS Region: $AWS_REGION"

# Terraform operations
log_info "Initializing Terraform..."
terraform init -upgrade

log_info "Validating Terraform configuration..."
terraform validate

log_info "Formatting Terraform files..."
terraform fmt -recursive

log_info "Running Terraform plan..."
terraform plan -out=tfplan

# Prompt for approval in interactive mode
if [ -t 0 ]; then
    read -p "Do you want to apply these changes? (yes/no): " APPLY_CONFIRM
    if [ "$APPLY_CONFIRM" != "yes" ]; then
        log_warn "Deployment cancelled by user"
        rm -f tfplan
        exit 0
    fi
fi

log_info "Applying Terraform changes..."
terraform apply tfplan
rm -f tfplan

# Export outputs
log_info "Extracting Terraform outputs..."

USER_POOL_ID=$(terraform output -raw user_pool_id 2>/dev/null)
CLIENT_ID=$(terraform output -raw client_id 2>/dev/null)
CLIENT_SECRET=$(terraform output -raw client_secret 2>/dev/null)
ISSUER_URI=$(terraform output -raw issuer_uri 2>/dev/null)
DOMAIN=$(terraform output -raw cognito_domain 2>/dev/null)
HOSTED_UI_URL=$(terraform output -raw hosted_ui_url 2>/dev/null)
JWKS_URI=$(terraform output -raw jwks_uri 2>/dev/null)
BRANDING_ID=$(terraform output -raw managed_login_branding_id 2>/dev/null)
CALLBACK_URL=$(terraform output -raw callback_url 2>/dev/null)
LOGOUT_REDIRECT_URL=$(terraform output -raw logout_redirect_url 2>/dev/null)


# Validate outputs
if [ -z "$USER_POOL_ID" ] || [ -z "$CLIENT_ID" ] || [ -z "$ISSUER_URI" ]; then
    log_error "Failed to retrieve Terraform outputs"
    exit 1
fi

log_info "Terraform outputs retrieved successfully"

# Display configuration
log_info "Configuration Summary:"
echo "  User Pool ID: $USER_POOL_ID"
echo "  Client ID: $CLIENT_ID"
echo "  Domain: $DOMAIN"
echo "  Issuer URI: $ISSUER_URI"
echo "  JWKS URI: $JWKS_URI"
echo "  Managed Login Branding ID: $BRANDING_ID"
echo "  Hosted UI URL (Modern Managed Login v2): $HOSTED_UI_URL"

# SSM parameters are already created by Terraform
log_info "SSM parameters created by Terraform"

# Save outputs to local file for reference
OUTPUT_FILE="cognito-config.env"
cat > "$OUTPUT_FILE" <<EOF
# Generated by deploy.sh on $(date)
# AWS Cognito Configuration with Modern Managed Login UI v2
COGNITO_USER_POOL_ID=$USER_POOL_ID
COGNITO_CLIENT_ID=$CLIENT_ID
COGNITO_CLIENT_SECRET=$CLIENT_SECRET
COGNITO_ISSUER_URI=$ISSUER_URI
COGNITO_JWKS_URI=$JWKS_URI
COGNITO_DOMAIN=$DOMAIN
COGNITO_HOSTED_UI_URL=$HOSTED_UI_URL
COGNITO_MANAGED_LOGIN_BRANDING_ID=$BRANDING_ID
CALLBACK_URL=$CALLBACK_URL
LOGOUT_REDIRECT_URL=$LOGOUT_REDIRECT_URL
AWS_REGION=$AWS_REGION

# SSM Parameter Paths (created by Terraform)
SSM_USER_POOL_ID_PATH=/\${TF_VAR_project_name:-awsinfra}/\${TF_VAR_environment:-dev}/cognito/user_pool_id
SSM_CLIENT_ID_PATH=/\${TF_VAR_project_name:-awsinfra}/\${TF_VAR_environment:-dev}/cognito/client_id
SSM_CLIENT_SECRET_PATH=/\${TF_VAR_project_name:-awsinfra}/\${TF_VAR_environment:-dev}/cognito/client_secret
SSM_ISSUER_URI_PATH=/\${TF_VAR_project_name:-awsinfra}/\${TF_VAR_environment:-dev}/cognito/issuer_uri
SSM_DOMAIN_PATH=/\${TF_VAR_project_name:-awsinfra}/\${TF_VAR_environment:-dev}/cognito/domain
EOF

log_info "Configuration saved to $OUTPUT_FILE"

# Verify SSM parameters
log_info "Verifying SSM parameters in AWS..."
SSM_VERIFY=$(aws ssm get-parameters-by-path \
  --path "/${TF_VAR_project_name:-clone-app}/${TF_VAR_environment:-dev}/cognito" \
  --region "${AWS_REGION:-us-east-1}" \
  --query 'Parameters[*].Name' \
  --output text 2>/dev/null)

if [ -n "$SSM_VERIFY" ]; then
    log_info "SSM parameters verified successfully:"
    echo "$SSM_VERIFY" | tr '\t' '\n' | sed 's/^/  ✓ /'
else
    log_error "Warning: Could not verify SSM parameters. Check AWS region configuration."
fi

log_info "Deployment completed successfully!"

# Display next steps
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ Deployment Successful!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "🎨 Modern Managed Login UI (v2) is now enabled!"
echo ""
echo "📋 Next Steps:"
echo "  1. Review the configuration in: $OUTPUT_FILE"
echo "  2. Test the Modern Hosted UI: $HOSTED_UI_URL"
echo "  3. Update your Spring Boot application with SSM parameter paths"
echo "  4. Run: docker-compose up -d"
echo ""
echo "📚 Documentation:"
echo "  - SSM parameters are automatically created in AWS Parameter Store"
echo "  - Use the paths in $OUTPUT_FILE to reference them in your app"
echo "  - The Modern UI provides a better UX with responsive design"
echo ""
echo "🔍 Verify SSM Parameters:"
echo "  aws ssm get-parameters-by-path --path \"/${TF_VAR_project_name:-clone-app}/${TF_VAR_environment:-dev}/cognito\" --recursive --region ${AWS_REGION:-us-east-1}"
echo ""
echo "🔐 Security Notes:"
echo "  - Client secret is stored securely in SSM Parameter Store"
echo "  - Never commit $OUTPUT_FILE to version control"
echo "  - Add $OUTPUT_FILE to .gitignore"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
